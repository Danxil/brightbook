var vow = require('vow')

module.exports = function(db) {
    var db = require('./models')(db);
    function checkUserAccess(req, checkGroup)
    {
        var def = vow.defer()

        if (req.session.login)
            db.User.findOne({where: {login: req.session.login}}).then(function(user) {
                if (user) {
                    user.getGroup().then(function() {
                        if (!group || checkGroup != group.get('name'))
                            def.reject()

                        def.resolve(user)
                    });
                }
                else
                    def.reject()
            });
        else if (req.cookies.logintoken) {
            var loginTokenCookie = JSON.parse(req.cookies.logintoken);

            db.LoginToken.findOne({where: {login: loginTokenCookie.login, series: loginTokenCookie.series}})
                .then(function(loginToken) {
                    if (!loginToken)
                        def.reject()
                    else if (loginTokenCookie.token != loginToken.token)
                        def.reject()

                    db.User.findOne({where: {login: loginTokenCookie.login}}).then(function(user) {
                        var newToken = loginToken.randomValue();

                        loginToken.update({token: newToken}).then(function() {
                            req.session.login = user.login;

                            res.cookie('logintoken', loginToken.cookieValue(), {
                                expires: new Date(Date.now() + 2 * 604800000),
                                path: '/'
                            });

                            user.getGroup().then(function(group) {
                                if (checkGroup < group.get('name'))
                                    def.reject()

                                def.resolve(user)
                            });
                        });
                    });
                });
        }
        else
            def.reject()

        return def.promise()
    }

    function createSession(req)
    {
        var def = vow.defer()

        def.reject()

        var authorisationData = req.body;

        db.User.findOne({login: authorisationData.login}).then(function(user)
        {
            if (user && user.authorisation(authorisationData.pass))
            {
                req.session.login = user.login;

                if (authorisationData.remember)
                {
                    loginToken = db.LoginToken.upsert({login: authorisationData.login}).then(function() {
                        res.cookie('logintoken', loginToken.cookieValue(),
                            {
                                expires: new Date(Date.now() + 2 * 604800000),
                                path: '/'
                            });

                        def.resolve(req)
                    });
                }
                else
                    def.resolve(req)

            }
            else
                def.reject()

            def.promise()
        });
    }

    return {
        checkAdmin: function(req)
        {
            checkUser(req, 'admin')
        },
        checkUser: function(req)
        {
            checkUser(req, 'user')
        },
        createSession: createSession
    }
}